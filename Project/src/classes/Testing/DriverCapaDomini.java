package classes.Testing;

import classes.*;
import classes.cella.Cella;
import classes.cella.CellaHexagonal;
import classes.cella.CellaQuadrada;
import classes.cella.CellaTriangular;
import classes.enums.*;
import classes.taulell.Taulell;
import classes.taulell.TaulellQuadrat;
import classes.taulell.TaulellRectangular;
import classes.taulell.TaulellTriangular;
import lib.IO;
import lib.Manager;

import java.util.ArrayList;
import java.util.Random;

import static lib.IO.readFileHidatos;
import static lib.IO.readInt;

public class DriverCapaDomini {

    private static String option;

    private static String readString() {
        return IO.readString();
    }

    private static void readOpcions() {
        System.out.println("\nEnter an option: ");
        option = readString();
    }

    private static void opcionsCella() {
        System.out.println("Options for Cella class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_cella -> Create a non empty object of Cella class");
        System.out.println("Seters:");
        System.out.println("\tset_content_type");
        System.out.println("\tset_content");
        System.out.println("Geters:");
        System.out.println("\tget_content_type");
        System.out.println("\tget_content");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsHidato() {
        System.out.println("Options of Hidato class:");
        System.out.println("Constructors:");
        System.out.println("\t create_hidato -> Generate a Hidato with a given topology by generateHidato function");
        System.out.println("Seters:");
        System.out.println("\tset_dades -> Set the data of the Hidato contained in the Hidato_solo.txt");
        System.out.println("Geters:");
        System.out.println("\tget_dades -> Show the data of the Hidato readed from Hidato_solo.txt");
        System.out.println("Others:");
        System.out.println("\tsolve_all -> Solve the Hidatos of the Hidatos.txt file, you can add your own Hidatos if you want");
        System.out.println("\tsolve -> Solve the Hidato readed from hidato_solo.txt file, you can add your own Hidato if you want");
        System.out.println("\tsolve_created -> Solve the Hidatos generated by generarHidato");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsUsuari() {
        System.out.println("Options for Usuari class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_usuari -> Create a non empty object of Usuari class");
        System.out.println("Seters:");
        System.out.println("\tset_username");
        System.out.println("\tset_id");
        System.out.println("Geters:");
        System.out.println("\tget_username");
        System.out.println("\tget_id");
        System.out.println("\tget_admin");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsRankingItem() {
        System.out.println("Options for RankingItem class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_rankingItem -> Create a non empty object of RankingItem class");
        System.out.println("Seters:");
        System.out.println("\tset_user");
        System.out.println("\tset_score");
        System.out.println("Geters:");
        System.out.println("\tget_user");
        System.out.println("\tget_score");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsTaulell() {
        System.out.println("Options for Taulell class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_taulell -> Create a non empty object of Taulell class");
        System.out.println("Seters:");
        System.out.println("\tset_cela_type");
        System.out.println("\tset_adjacency_type");
        System.out.println("\tset_rows");
        System.out.println("\tset_columns");
        System.out.println("Geters:");
        System.out.println("\tget_rows");
        System.out.println("\tget_columns");
        System.out.println("\tget_adjacency_type");
        System.out.println("\tget_cela_type");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsRanking() {
        System.out.println("Options for Ranking class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_ranking -> Create a random  Ranking ");
        System.out.println("Seters:");
        System.out.println("\tset_ranking -> get a copy of a ranking");
        System.out.println("\tadd_item -> add a new randomItem to the ranking");
        System.out.println("\tremove_item -> remove a given rankingItem from Ranking");
        System.out.println("Geters:");
        System.out.println("\tget_ranking -> obtain a copy of the ranking");
        System.out.println("\t print_ranking -> print the ranking on the standar I/O chanel");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcionsCrono() {
        System.out.println("Options for Crono class:");
        System.out.println("Constructors:");
        System.out.println("\tcreate_crono -> Create an object of Crono class");
        System.out.println("\tstart_crono");
        System.out.println("\tpause_crono");
        System.out.println("\trestart_crono");
        System.out.println("\tget_time");
        System.out.println("Exit -> Finish the test");
        System.out.println("classes? -> Print the available classes");
    }

    private static void opcions() {
        System.out.println("What class do you want to test ?");
        System.out.println("Classes to test:");
        System.out.println("\tusuari");
        System.out.println("\ttaulell");
        System.out.println("\trankingitem");
        System.out.println("\tranking");
        System.out.println("\tcrono");
        System.out.println("\thidato");
        System.out.println("\tcella");

        String opt = readString();

        if (opt == "crono" ){
            opcionsCrono();
        }
        else if (opt == "ranking" ) {
            opcionsRanking();
        }
        else if (opt == "rankingitem" ) {
            opcionsRankingItem();
        }
        else if (opt == "taulell" ) {
            opcionsTaulell();
        }
        else if (opt == "usuari" ) {
            opcionsUsuari();
        }
        else if (opt == "hidato" ) {
            opcionsHidato();
        }
        else if (opt == "cella" ) {
            opcionsCella();
        }
    }

    private static RankingItem createItem() {
        Random random=new Random();
        Usuari user=new Usuari(1234,String.valueOf(random.nextInt(9999999)),random.nextBoolean());
        RankingItem a = new RankingItem(user.getId(),random.nextInt());
        return a;
    }

    private static ArrayList<RankingItem> createRanking() {
        Random random=new Random();
        String[] usernames = new String[20];
        Boolean[] admins = new Boolean[20];
        Integer puntuacio;
        ArrayList<RankingItem> items = new ArrayList<RankingItem>();
        Usuari user;
        for (int i=0;i<20;++i){
            usernames[i]=String.valueOf(random.nextInt(9999999));
            admins[i]=random.nextBoolean();
            user=new Usuari(1234,usernames[i],admins[i]);
            puntuacio = random.nextInt(999999);
            items.add(new RankingItem(user.getId(), puntuacio));
        }
        return items;
    }

    public static void main() throws Exception {
        opcions();
        readOpcions();
        Usuari testUser = new Usuari();
        String username,Id,IsAdmin,score;
        String admin;
        Taulell testTaulell = null;
        RankingItem testRankingItem = new RankingItem();
        Ranking testRanking = new Ranking();
        ArrayList<RankingItem> rankingItems;
        Crono cron = new Crono();
        Hidato testHidato = null;
        Cella testCella = null;
        ArrayList<Hidato> hidato = new ArrayList<>();
        while (!option.equals("Exit")) {
            switch (option) {
                case "create_usuari":
                    System.out.println("Id of the user ? -> The Id it's a integer");
                    Id = readString();
                    System.out.println("Username ?");
                    username = readString();
                    System.out.println("The user it's administrator ? -> yes or no (blanc will be trated as no)");
                    admin = readString();
                    if(admin.equals("yes")||admin.equals("y"))testUser = new Usuari(Integer.valueOf(Id),username,true);
                    else testUser = new Usuari(Integer.valueOf(Id),username,false);
                    break;
                case "set_username":
                    System.out.println("Username ?");
                    username = readString();
                    testUser.setUsername(username);
                    break;
                case "set_id":
                    System.out.println("Id of the user ? -> The Id it's a integer");
                    Id = readString();
                    testUser.setId(Integer.valueOf(Id));
                    break;
                case "get_username":
                    System.out.println(testUser.getUsername());
                    break;
                case "get_id":
                    System.out.println(testUser.getId());
                    break;
                case "get_admin":
                    System.out.println(testUser.isAdmin());
                    break;
                case "create_rankingItem":
                    System.out.println("Id of the Hidato ?");
                    String IdH = readString();
                    System.out.println("Id of the user ?");
                    String IdU = readString();
                    System.out.println("Score ?");
                    String points = readString();
                    System.out.println("Username ?");
                    String Username = readString();
                    testRankingItem = new RankingItem(Integer.valueOf(IdU),Integer.valueOf(points),Integer.valueOf(IdH),Username);
                    System.out.println("Created");
                    break;
                case "set_user":
                    System.out.println("username ?");
                    testRankingItem.setUsername(readString());
                    break;
                case "set_score":
                    System.out.println("Score ?");
                    testRankingItem.setPuntuacio(Integer.valueOf(readString()));
                    break;
                case "get_user":
                    System.out.println(testRankingItem.getUser());
                    break;
                case "get_score":
                    System.out.println(testRankingItem.getPuntuacio());
                    break;
                case "create_taulell":
                    String params[] = new String[4];
                    System.out.println("Cell type ? -> options: TRIANGLE, SQUARE or HEXAGON");
                    params[0] = readString();
                    System.out.println("Adjacency type ? -> options: SIDE, BOTH (BOTH -> includes vertex and side adjacency)");
                    params[1] = readString();
                    System.out.println("Number of rows ?");
                    params[2] = readString();
                    System.out.println("Number of columns ?");
                    params[3] = readString();
                    if (params[0]=="TRIANGLE") {
                        testTaulell = new TaulellTriangular(TCellShape.valueOf(params[0]), TAdjacency.valueOf(params[1]),Integer.valueOf(params[2]),Integer.valueOf(params[3]));
                    }
                    else if (params[0]=="SQUARE") {
                        testTaulell = new TaulellQuadrat(TCellShape.valueOf(params[0]), TAdjacency.valueOf(params[1]),Integer.valueOf(params[2]),Integer.valueOf(params[3]));
                    }
                    else {
                        testTaulell = new TaulellRectangular(TCellShape.valueOf(params[0]), TAdjacency.valueOf(params[1]),Integer.valueOf(params[2]),Integer.valueOf(params[3]));
                    }
                    break;
                case "set_cela_type":
                    System.out.println("Cell type ? -> options: TRIANGLE, SQUARE or HEXAGON");
                    String type = readString();
                    testTaulell.setTipusCela(TCellShape.valueOf(type));
                    break;
                case "set_adjacency_type":
                    System.out.println("Adjacency type ? -> options: SIDE, BOTH (BOTH -> includes vertex and side adjacency)");
                    String adj = readString();
                    testTaulell.setTipusAdjacencia(TAdjacency.valueOf(adj));
                    break;
                case "set_rows":
                    System.out.println("Number of rows ?");
                    String rows = readString();
                    testTaulell.setNombreFiles(Integer.valueOf(rows));
                    break;
                case "set_columns":
                    System.out.println("Number of columns ?");
                    String columns=readString();
                    testTaulell.setNombreColumnes(Integer.valueOf(columns));
                    break;
                case "get_cela_type":
                    System.out.println(String.valueOf(testTaulell.getTipusCela()));
                    break;
                case "get_adjacency_type":
                    System.out.println(String.valueOf(testTaulell.getTipusAdjacencia()));
                    break;
                case "get_rows":
                    System.out.println(testTaulell.getNombreFiles());
                    break;
                case "get_columns":
                    System.out.println(testTaulell.getNombreColumnes());
                    break;
                case "create_ranking":
                    rankingItems=createRanking();
                    testRanking = new Ranking(rankingItems);
                    testRanking.getRanking().sort((a,b) -> b.getPuntuacio().compareTo(a.getPuntuacio()));
                    break;
                case "add_item":
                    testRanking.addRankingItem(createItem());
                    testRanking.getRanking().sort((a,b) -> b.getPuntuacio().compareTo(a.getPuntuacio()));
                    break;
                case "remove_item":
                    System.out.println("Username to remove from the ranking ?");
                    testRanking.removeRankingItem(readInt());
                    testRanking.getRanking().sort((a,b) -> b.getPuntuacio().compareTo(a.getPuntuacio()));
                    break;
                case "get_ranking":
                    System.out.println(testRanking);
                    break;
                case "create_crono":
                    cron=new Crono();
                    break;
                case "start_crono":
                    cron.startCron();
                    break;
                case "pause_crono":
                    cron.pauseCron();
                    break;
                case "restart_crono":
                    cron.restartCron();
                    break;
                case "get_time":
                    if(cron.getTime()<0) System.out.println("You don't have paused the cronometer");
                    else System.out.println(String.valueOf(cron.getTime()));
                    break;
                case "create_hidato":
                    String [] paramsH = new String[4];
                    System.out.println("Chose the topology for the game table -> SQUARE,RECTANGLE,TRIANGLE");
                    paramsH[0] = readString();
                    switch (TTopology.valueOf(paramsH[0])) {
                        case TRIANGLE: testHidato = new Hidato(new TaulellTriangular());
                            break;
                        case SQUARE: testHidato = new Hidato(new TaulellQuadrat());
                            break;
                        default: testHidato = new Hidato(new TaulellRectangular());
                            break;
                    }
                    System.out.println("Cell type for the new Hidato ? -> SQUARE,TRIANGLE,HEXAGON");
                    paramsH[1] = readString();
                    testHidato.getTaulell().setTipusCela(TCellShape.valueOf(paramsH[1]));
                    System.out.println("Adjacency type for the new Hidato ? -> SIDE,BOTH (BOTH, includes SIDE and VERTEX adjacency");
                    paramsH[2] = readString();
                    testHidato.getTaulell().setTipusAdjacencia(TAdjacency.valueOf(paramsH[2]));
                    System.out.println("Chose a dificult level -> EASY,MEDIUM,HARD");
                    paramsH[3] = readString();
                    if (testHidato.generateHidato(TDifficulty.valueOf(paramsH[3]))) {
                        testHidato.print();
                    }
                    break;
                case "solve_created":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Hidato to solve------");
                    System.out.println("---------------------------");
                    testHidato.print();
                    System.out.println("\n---------------------------");
                    System.out.println("-------Solving Hidato------");
                    System.out.println("---------------------------");
                    System.out.println("Dificultat: " + String.valueOf(testHidato.getDificultat()));
                    System.out.println("---------------------------");
                    testHidato.solve();
                    testHidato.print();
                    break;
                case "set_dades":
                    try{
                        ArrayList<Integer> IdHi = new ArrayList<Integer>();
                        hidato = readFileHidatos("hidatos.txt");
                        for (int i=0;i<hidato.size();++i){
                            System.out.println(hidato.get(i).getId());
                            IdHi.add(Manager.afegirHidato(hidato.get(i)));
                        }
                        System.out.println(IdHi);
                    }
                    catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case "get_dades":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Data of the Hidato------");
                    System.out.println("---------------------------");
                    if(!hidato.isEmpty()) hidato.get(0).print();
                    else System.out.println("The Hidato it's empty, do you have read the hidato_solo.txt ?");
                    break;
                case "solve":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Solving Hidato------");
                    System.out.println("---------------------------");
                    if(hidato.isEmpty()) {
                        System.out.println("The hidato it's not readed yet");
                        break;
                    }
                    if(hidato.get(0).validate()) {
                        hidato.get(0).solve();
                        hidato.get(0).print();
                    }
                    else {
                        hidato.get(0).print();
                        System.out.println("The Hidato dosen't have any solution");
                    }
                    break;
                case "solve_all":
                    try {
                        ArrayList<Hidato> hidatos = readFileHidatos("hidatos.txt");
                        for(int i = 0;i<hidatos.size();i++) {
                            Hidato a = hidatos.get(i);
                            System.out.printf("HIDATO\nShape: %s\nAdjacency: %s\n", String.valueOf(a.getTaulell().getTipusCela()), String.valueOf(a.getTaulell().getTipusAdjacencia()));
                            a.print();
                            System.out.println("Validating HIDATO:");
                            if (a.validate()) {
                                System.out.println("The hidato have solution ? -> True");
                                a.solve();
                                a.print();
                            }
                            else System.out.println("The Hidato dosen't have solution");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case "create_cella":
                    System.out.println("Type of cella ? -> quadrada,triangular or hexagonal");
                    String typeCella = readString();
                    System.out.println("Content type ? -> NUMBER OR HOLE");
                    String ty = readString();
                    System.out.println("The number '0' represents a white space (a cell to be filled with a number for the player/system) and it's the default value for a HOLE");
                    System.out.println("Content ? ");
                    String co = readString();
                    System.out.println("Type of adjacency -> SIDE or BOTH");
                    if (typeCella.equals("quadrada")) {
                        testCella = new CellaQuadrada(TCellContent.valueOf(ty), TAdjacency.valueOf(readString()), Integer.valueOf(co));
                    }
                    else if(typeCella.equals("triangular")) {
                        testCella = new CellaTriangular(TCellContent.valueOf(ty), TAdjacency.valueOf(readString()), Integer.valueOf(co));
                    }
                    else {
                        testCella = new CellaHexagonal(TCellContent.valueOf(ty), TAdjacency.valueOf(readString()), Integer.valueOf(co));
                    }
                    break;
                case "set_content_type":
                    System.out.println("The possible content types are -> NUMBER or HOLE");
                    testCella.setContentType(TCellContent.valueOf(readString()));
                    break;
                case "set_content":
                   System.out.println("The number '0' represents a white space (a cell to be filled with a number for the player/system)");
                    System.out.println("Number ?");
                    testCella.setContent(Integer.valueOf(readString()));
                    break;
                case "get_content_type":
                    System.out.println(String.valueOf(testCella.getContentType()));
                    break;
                case "get_content":
                    System.out.println("The default content for a cell it's '0'");
                    System.out.println(String.valueOf(testCella.getContent()));
                    break;
                case "list":
                    opcions();
                    break;
                case "classes?":
                    opcions();
                    break;
                default:
                    System.out.println("Invalid option\n you can type 'list' to see the options again");
            }
            readOpcions();
        }

    }
}
