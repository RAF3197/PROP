package classes.Testing;


import classes.Hidato;
import classes.enums.TAdjacency;
import classes.enums.TCellShape;
import classes.enums.TDifficulty;
import classes.enums.TTopology;
import classes.taulell.TaulellQuadrat;
import classes.taulell.TaulellRectangular;
import classes.taulell.TaulellTriangular;
import lib.IO;
import lib.Manager;
import lib.SQLiteJDBCDriverConnection;

import java.io.IOException;
import java.util.ArrayList;

import static lib.IO.readFileHidatos;

/**
 * Driver for Persistence
 * @author Bernat Felip
 */

public class DriverHidato {

    private static String option;

    //Reads a string from the System input
    private static String readString() {
        return IO.readString();
    }

    private static void readOpcions() {
        System.out.println("\nEnter an option: ");
        option = readString();
    }

    private static void opcions() {
        System.out.println("Options of Hidato class:");
        System.out.println("Constructors:");
        System.out.println("\t create_hidato -> Generate a Hidato with a given topology by generateHidato function");
        System.out.println("Seters:");
        System.out.println("\tset_dades -> Set the data of the Hidato contained in the Hidato_solo.txt");
        System.out.println("Geters:");
        System.out.println("\tget_dades -> Show the data of the Hidato readed from Hidato_solo.txt");
        System.out.println("\tget_dificultat -> Show the dificulty of the Hidato readed from Hidato_solo.txt");
        System.out.println("\tset_dificultat -> Change the dificulty of the Hidato readed from Hidato_solo.txt");
        System.out.println("Others:");
        System.out.println("\tsolve_all -> Solve the Hidatos of the Hidatos.txt file, you can add your own Hidatos if you want");
        System.out.println("\tsolve -> Solve the Hidato readed from hidato_solo.txt file, you can add your own Hidato if you want");
        System.out.println("\tvalidate -> Validate the Hidato of Hidato_solo.txt file, you can change the Hidato if you want");
        System.out.println("\tsolve_created -> Solve the Hidatos generated by generarHidato");

        System.out.println("Exit -> Finish the test");
    }


    public static void main(String args[]) throws IOException, IllegalAccessException, InstantiationException {
        SQLiteJDBCDriverConnection.isDatabaseAccessible();

        ArrayList<Hidato> hidato = new ArrayList<>();
        Hidato test = new Hidato(new TaulellQuadrat());
        opcions();
        readOpcions();
        while(!option.equals("Exit")) {
            switch (option) {
                case "create_hidato":
                    String [] params = new String[4];
                    System.out.println("Chose the topology for the game table -> SQUARE,RECTANGLE,TRIANGLE");
                    params[0] = readString();
                    switch (TTopology.valueOf(params[0])) {
                        case TRIANGLE: test = new Hidato(new TaulellTriangular());
                            break;
                        case SQUARE: test = new Hidato(new TaulellQuadrat());
                            break;
                        default: test = new Hidato(new TaulellRectangular());
                            break;
                    }
                    System.out.println("Cell type for the new Hidato ? -> SQUARE,TRIANGLE,HEXAGON");
                    params[1] = readString();
                    test.getTaulell().setTipusCela(TCellShape.valueOf(params[1]));
                    System.out.println("Adjacency type for the new Hidato ? -> SIDE,BOTH (BOTH, includes SIDE and VERTEX adjacency");
                    params[2] = readString();
                    test.getTaulell().setTipusAdjacencia(TAdjacency.valueOf(params[2]));
                    System.out.println("Chose a dificult level -> EASY,MEDIUM,HARD");
                    params[3] = readString();
                   if (test.generateHidato(TDifficulty.valueOf(params[3]))) {
                       test.print();
                   }
                    break;
                case "solve_created":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Hidato to solve------");
                    System.out.println("---------------------------");
                    test.print();
                    System.out.println("\n---------------------------");
                    System.out.println("-------Solving Hidato------");
                    System.out.println("---------------------------");
                    System.out.println("Dificultat: " + String.valueOf(test.getDificultat()));
                    System.out.println("---------------------------");
                    test.solve();
                    test.print();
                    break;
                case "set_dades":
                    try{
                        ArrayList<Integer> Id = new ArrayList<Integer>();
                        hidato = readFileHidatos("hidatos.txt");
                        for (int i=0;i<hidato.size();++i){
                            System.out.println(hidato.get(i).getId());
                            Id.add(Manager.afegirHidato(hidato.get(i)));
                        }
                        System.out.println(Id);
                    }
                    catch (Exception e){
                        System.out.println(e.getMessage());
                    }
                    break;
                case "get_dades":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Data of the Hidato------");
                    System.out.println("---------------------------");
                    if(!hidato.isEmpty()) hidato.get(0).print();
                    else System.out.println("The Hidato it's empty, do you have read the hidato_solo.txt ?");
                    break;
                case "get_dificultat":
                    System.out.println(String.valueOf(test.getDificultat()));
                    break;
                case "set_dificultat":
                    System.out.println("Chose a dificult level -> EASY,MEDIUM,HARD");
                    hidato.get(0).setDificultat(TDifficulty.valueOf(readString()));
                    break;
                case "solve_all":
                    try {
                        ArrayList<Hidato> hidatos = readFileHidatos("hidatos.txt");
                        for(int i = 0;i<hidatos.size();i++) {
                            Hidato a = hidatos.get(i);
                            System.out.printf("HIDATO\nShape: %s\nAdjacency: %s\n", String.valueOf(a.getTaulell().getTipusCela()), String.valueOf(a.getTaulell().getTipusAdjacencia()));
                            a.print();
                            System.out.println("Validating HIDATO:");
                            if (a.validate()) {
                                System.out.println("The hidato have solution ? -> True");
                                a.solve();
                                a.print();
                            }
                            else System.out.println("The Hidato dosen't have solution");
                        }
                    }
                    catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                case "solve":
                    System.out.println("\n---------------------------");
                    System.out.println("-------Solving Hidato------");
                    System.out.println("---------------------------");
                    if(hidato.isEmpty()) {
                        System.out.println("The hidato it's not readed yet");
                        break;
                    }
                    if(hidato.get(0).validate()) {
                        hidato.get(0).solve();
                        hidato.get(0).print();
                    }
                    else {
                        hidato.get(0).print();
                        System.out.println("The Hidato dosen't have any solution");
                    }
                    break;
                case "list":
                    opcions();
                    break;
                default:
                    System.out.println("Invalid option\n you can type 'list' to see the options again");
            }
            readOpcions();
        }
    }
}
